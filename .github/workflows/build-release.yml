name: "Build kernels for release"

env:
  OUT_DIR: "${{ github.workspace }}/out"

on:
  workflow_call:
    inputs:
      from_ci:
        type: boolean
        required: false
        default: true

  workflow_dispatch:

jobs:
  Set-repos:
    name: "üêÇ Parse repos.json"
    runs-on: ubuntu-latest
    if: github.repository_owner == 'zi00duck' && github.repository == 'zi00duck/Begonia-Kernel-Builder'
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
      builddate: ${{ steps.generate-builddate.outputs.builddate }}
    steps:
      - name: "üòÑ Checkout"
        uses: actions/checkout@v3

      - name: "üòÜ Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' repos/repos*.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: "‚è∞ Set builddate"
        id: generate-builddate
        run: echo "builddate=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üêé Build kernel"
    runs-on: ubuntu-latest
    if: github.repository_owner == 'cvnertnc' && github.repository == 'cvnertnc/Begonia-Kernel-Builder'
    needs:
      - Set-repos
    strategy:
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      WORKSPACE: ${{ github.workspace }}
      builddate: "${{ needs.Set-repos.outputs.builddate }}"

      KNAME: ${{ matrix.repos.kernelName }}
      KERNEL_DEVICE: ${{ matrix.repos.kernelSource.device }}
      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.defconfig }}

      withRoot: ${{ matrix.repos.withRoot }}
      withSUSFS: ${{ matrix.repos.withSUSFS }}
      whichSUSFS: ${{ matrix.repos.whichSUSFS }}
      withKPM: ${{ matrix.repos.withKPM }}
      ccache: ${{ matrix.repos.ccache }}
      useAnykernel: ${{ matrix.repos.AnyKernel3.use }}
      release: ${{ matrix.repos.AnyKernel3.release }}

    steps:
      - name: "üü£ Set Kernel Variables"
        run: |
          echo "KERNEL_NAME=${{ matrix.repos.kernelSource.name }}" >> $GITHUB_ENV
          echo "KERNEL_REPO=${{ matrix.repos.kernelSource.repo }}" >> $GITHUB_ENV
          echo "KERNEL_BRANCH=${{ matrix.repos.kernelSource.branch }}" >> $GITHUB_ENV

          echo "toolchains=$(echo '${{ toJSON(matrix.repos.toolchains) }}' | jq -c)" >> $GITHUB_ENV
          echo "params=$(echo '${{ toJSON(matrix.repos.params) }}' | jq -c)" >> $GITHUB_ENV
          echo "THREAD=$(nproc --all)" >> $GITHUB_ENV

      - name: "‚≠ê Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar
          sudo apt-get install -y checkinstall libncursesw5-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev
          wget https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz
          tar -xvf Python-2.7.18.tgz
          cd Python-2.7.18
          ./configure
          make -j$(nproc)
          sudo make install
          curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py
          sudo python2.7 get-pip.py
          sudo update-alternatives --install /usr/bin/python python /usr/local/lib/python2.7 1
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 2 || true
          cd ..

      - name: "üöÆ Clear older runs"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh run list -L400 --json databaseId -q '.[].databaseId' | tail -n+5 | xargs -IID gh api "repos/$GITHUB_REPOSITORY/actions/runs/ID" -X DELETE || :

      - name: "üöÑ Create cache key from `repos`"
        if: ${{ env.ccache == 'true' }}
        id: ccache_key
        run: |
          ccache -o compression=false -o cache_dir=$HOME/.ccache
          echo "CACHE_KEY=$(echo -n '${{ toJSON(matrix.repos) }}' | base64 -w 0 | cut -c -48)" >> $GITHUB_OUTPUT

      - name: "üöÖ Cache ccache files"
        if: ${{ env.ccache == 'true' }}
        uses: actions/cache@v3
        with:
          path: |
            ~/.ccache
            ${{ env.OUT_DIR }}
          key: ccache-${{ env.KERNEL_NAME }}-${{ steps.ccache_key.outputs.CACHE_KEY }}-${{ env.builddate }}
          restore-keys: |
            ccache-${{ env.KERNEL_NAME }}-${{ steps.ccache_key.outputs.CACHE_KEY }}-${{ env.builddate }}

      - name: "‚è∞ Setup Anykernel3"
        env:
          params: "${{ toJSON(matrix.repos.AnyKernel3) }}"
        run: |
          ANYKERNEL_REPO=$(echo $params | jq -r ".repo")
          ANYKERNEL_BRANCH=$(echo $params | jq -r ".branch")
          git clone --recursive --depth=1 -j $(nproc) --branch $ANYKERNEL_BRANCH $ANYKERNEL_REPO AnyKernel3

          echo "ü§î Setup Anykernel3 => ($ANYKERNEL_REPO)"

      - name: "üåü Clone kernel source => (${{ env.KERNEL_REPO }})"
        run: |
          git clone --recursive --depth=1 -j $(nproc) --branch $KERNEL_BRANCH $KERNEL_REPO $KERNEL_NAME
          echo -e "\n‚ö†Ô∏è Kernel is at commit: $(git -C $KERNEL_NAME rev-parse HEAD)\n"

          echo "ü§î Clone kernel source => ($KERNEL_REPO)"

      - name: "üí´ Get toolchains"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo "ü§î There is $toolchains_num defined toolchains."
          for ((i=0;i<toolchains_num;i++)); do
            toolchain_name=$(echo $toolchains | jq -r ".[$i].name")
            # Github
            toolchain_repo=$(echo $toolchains | jq -r ".[$i].repo")
            toolchain_branch=$(echo $toolchains | jq -r ".[$i].branch")
            # From archive
            toolchain_url=$(echo $toolchains | jq -r ".[$i].url")

            echo $toolchain_url
            if [ -z "${toolchain_url:-}" ] || [ "$toolchain_url" = "null" ];  then
              git clone --recursive --depth=1 -j $(nproc) --branch $toolchain_branch $toolchain_repo $toolchain_name
              echo "ü§î Clone $toolchain_name => ($toolchain_repo)"
            else
              wget "$toolchain_url"
              filename="${toolchain_url##*/}"
              mkdir -p $toolchain_name
              case "$filename" in
                *.zip)
                  unzip -d $toolchain_name "$filename"
                  ;;
                *.tar)
                  tar xvf "$filename" -C $toolchain_name
                  ;;
                *.tar.gz)
                  tar zxvf "$filename" -C $toolchain_name
                  ;;
                *.rar)
                  unrar x "$filename" $toolchain_name
                  ;;
                *)
                  echo "unknown file type: $filename"
                  ;;
              esac
            fi

            jq -r ".[$i].binPath[] | tostring" <<< "$toolchains" | while read -r bin_path; do
              echo "$WORKSPACE/$toolchain_name/$bin_path" >> $GITHUB_PATH
            done
          done

      - name: "üòé Set args"
        id: generate-args
        run: |
          echo "ü§î PATH Variable: $PATH"

          ARCH=$(echo $params | jq -r ".ARCH")
          CC=$(echo $params | jq -r ".CC")

          args="-j${{ env.THREAD }}"
          if [ -n "${{ env.OUT_DIR }}" ]; then
            mkdir -p ${{ env.OUT_DIR }} && args="$args O=${{ env.OUT_DIR }}"
          fi
          if [ -n "$ARCH" ]; then
            args="$args ARCH=$ARCH"
          fi
          if [ -n "$CC" ]; then

            if [[ "$CC" == *"/"* ]]; then
              CC=${{ env.WORKSPACE }}/$CC
            fi

            if [ ${{ env.ccache }} = true ]; then
              args="$args CC=\"ccache $CC\""
            else
              args="$args CC=$CC"
            fi
          fi
          while read -r externalCommand; do
            key=$(echo "$externalCommand" | cut -d= -f1)
            value=$(echo "$externalCommand" | cut -d= -f2)
            if [[ "$value" == *"/"* ]]; then
              value="${{ env.WORKSPACE }}/$value"
            fi
            args="$args $key=$value"
          done < <(jq -r '.externalCommand | to_entries[] | "\(.key)=\(.value)"' <<< "$params")

          echo "ü§î $args"
          echo "ARCH=$ARCH" >> $GITHUB_OUTPUT
          echo "args=$args" >> $GITHUB_OUTPUT

      - name: "ü™° Receiving scripts"
        id: receiving-scripts
        working-directory: ${{ env.KERNEL_NAME }}
        run: |
          if [ -d "./BKB" ]; then
            rm -rf "./BKB"
          fi

          BKB_BRANCH=main

          git clone --recursive -j $(nproc) --branch $BKB_BRANCH https://x-access-token:${{ secrets.GH_PAT }}@github.com/cvnertnc/susfs4ksu-begonia BKB

      - name: "üíâ APatch, SukiSU setup and [BACKPORT]: ptrace"
        id: apatch-sukisu-setup
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
          DEFCONFIG_NAME: ${{ env.DEFCONFIG_NAME }}
          GH_PAT: ${{ secrets.GH_PAT }}
          GITHUB_OUTPUT: ${{ github.output_path }}
        run: |
          BKB_YML=releases
          chmod +x BKB/kernel_patches/bkb/$BKB_YML/apatch_sukisu_setup.sh
          ./BKB/kernel_patches/bkb/$BKB_YML/apatch_sukisu_setup.sh

      - name: "üòã Integrate KernelSU or KernelSU-Next"
        id: integrate-kernelsu-next
        working-directory: ${{ env.KERNEL_NAME }}
        if: ${{ env.withRoot == 'ksu' || env.withRoot == 'sukisu' || env.withRoot == 'ksun' }}
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
          DEFCONFIG_NAME: ${{ env.DEFCONFIG_NAME }}
          GH_PAT: ${{ secrets.GH_PAT }}
          GITHUB_OUTPUT: ${{ github.output_path }}
          withRoot: ${{ env.withRoot }}
          withKPM: ${{ env.withKPM }}
          KNAME: ${{ env.KNAME }}
        run: |
          BKB_YML=releases
          chmod +x BKB/kernel_patches/bkb/$BKB_YML/integrate_kernelsu.sh
          ./BKB/kernel_patches/bkb/$BKB_YML/integrate_kernelsu.sh

      - name: "ü•∑ Add SUSFS patches"
        id: add-susfs-patches
        working-directory: ${{ env.KERNEL_NAME }}
        if: ${{ (env.withRoot == 'ksu' || env.withRoot == 'sukisu' || env.withRoot == 'ksun') && env.withSUSFS == 'true' }}
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
          DEFCONFIG_NAME: ${{ env.DEFCONFIG_NAME }}
          GH_PAT: ${{ secrets.GH_PAT }}
          GITHUB_OUTPUT: ${{ github.output_path }}
          withRoot: ${{ env.withRoot }}
          withSUSFS: ${{ env.withSUSFS }}
          whichSUSFS: ${{ matrix.repos.whichSUSFS }}
          KNAME: ${{ env.KNAME }}
        run: |
          BKB_YML=releases
          chmod +x BKB/kernel_patches/bkb/$BKB_YML/add_susfs_patches.sh
          ./BKB/kernel_patches/bkb/$BKB_YML/add_susfs_patches.sh

      - name: "üëç Make defconfig"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
          arch: ${{ steps.generate-args.outputs.ARCH }}
        run: |
          echo "PATH Variable: $PATH"
          make ${{ env.args }} ${{ env.DEFCONFIG_NAME }}

      - name: "üé∂ Build kernel"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "PATH Variable: $PATH"
          make ${{ env.args }}

      - name: "‚òØÔ∏è KPM Injection"
        id: kpm-inject
        working-directory: ${{ env.KERNEL_NAME }}
        if: ${{ env.withRoot == 'sukisu' && env.withKPM == 'true' }}
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          BKB_YML=releases
          chmod +x BKB/kernel_patches/bkb/$BKB_YML/kpm_injection.sh
          ./BKB/kernel_patches/bkb/$BKB_YML/kpm_injection.sh

      - name: "‚ù§Ô∏è Pack AnyKernel3.zip"
        if: ${{ env.useAnykernel == 'true' }}
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
          anykernel: "${{ env.WORKSPACE }}/${{ env.KERNEL_DEVICE }}-${{ steps.integrate-kernelsu-next.outputs.ROOT_VERSION }}-${{ env.KERNEL_NAME }}-${{ env.builddate }}"
        run: |
          ls -al

          if [ -e "${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image.gz" ]; then
            cp -f ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image.gz ./AnyKernel3/
          fi

          cd AnyKernel3/
          zip -q -r "${{ env.anykernel }}.zip" *

      - name: "üíæ Upload AnyKernel3 image => (${{ env.builddate }})"
        uses: actions/upload-artifact@v4
        if: ${{ env.useAnykernel == 'true' }}
        with:
          name: "${{ env.KERNEL_DEVICE }}-${{ steps.integrate-kernelsu-next.outputs.ROOT_VERSION }}-${{ env.KERNEL_NAME }}-${{ env.builddate }}"
          path: AnyKernel3/*

      - name: üßß Create GitHub Release => (${{ env.builddate }})
        continue-on-error: false
        uses: softprops/action-gh-release@v2.1.0
        if: ${{ env.useAnykernel == 'true' && env.release == 'true' }}
        with:
          tag_name: v${{ env.builddate }}
          name: v${{ env.builddate }}
          make_latest: true
          prerelease: false
          draft: false
          generate_release_notes: false
          body: "Astera Kernel by [MrErenK](https://github.com/MrErenK)\nNova Kernel by [Wahid7852](https://github.com/Wahid7852)\nPower kernel By [Saikrishna1504](https://github.com/Saikrishna1504)\nBuild with Github by [cvnertnc](https://github.com/cvnertnc)\nAll Linux kernel patched with [KernelSU](https://github.com/backslashxx/KernelSU), [KernelSU-Next](https://github.com/KernelSU-Next/KernelSU-Next) and [SukiSU-Ultra](https://github.com/SukiSU-Ultra/SukiSU-Ultra) + [SUSFS](https://gitlab.com/simonpunk/susfs4ksu) for Xiaomi Redmi Note 8 Pro (begonia).\n\n**Installation:**\n1. Flash the kernel from this release.\n2. Download and install the Manager\n\nKernelSU:\n> [![Stable Version](https://img.shields.io/github/v/release/backslashxx/KernelSU?label=Release&logo=github)](https://github.com/backslashxx/KernelSU/releases/latest) [![Nightly Version](https://img.shields.io/badge/Nightly%20Release-gray?logo=hackthebox&logoColor=fff)](https://nightly.link/backslashxx/KernelSU/workflows/build-manager/master/manager)\n\nKernelSU Next:\n> [![Stable Version](https://img.shields.io/github/v/release/KernelSU-Next/KernelSU-Next?label=Release&logo=github)](https://github.com/KernelSU-Next/KernelSU-Next/releases/latest) [![Nightly Version](https://img.shields.io/badge/Nightly%20Release-gray?logo=hackthebox&logoColor=fff)](https://nightly.link/KernelSU-Next/KernelSU-Next/workflows/build-manager-ci/next/Manager)\n\nSukiSU-Ultra:\n> [![Stable Version](https://img.shields.io/github/v/release/SukiSU-Ultra/SukiSU-Ultra?label=Release&logo=github)](https://github.com/SukiSU-Ultra/SukiSU-Ultra/releases/latest) [![Nightly Version](https://img.shields.io/badge/Nightly%20Release-gray?logo=hackthebox&logoColor=fff)](https://nightly.link/SukiSU-Ultra/SukiSU-Ultra/workflows/build-manager/main/manager)\n\n3. Download and install the SUSFS Module:\n> [![Stable Version](https://img.shields.io/github/v/release/sidex15/susfs4ksu-module?label=Release&logo=github)](https://github.com/sidex15/susfs4ksu-module/releases/latest) [![Nightly Version](https://img.shields.io/badge/Nightly%20Release-gray?logo=hackthebox&logoColor=fff)](https://nightly.link/sidex15/susfs4ksu-module/workflows/build/v1.5.2+)\n\n4. Download and install Mountify Module [![Mountify Module](https://img.shields.io/github/v/release/backslashxx/mountify?label=Release&logo=github)](https://github.com/backslashxx/mountify/releases/latest)"
          files: "${{ env.WORKSPACE }}/${{ env.KERNEL_DEVICE }}-${{ steps.integrate-kernelsu-next.outputs.ROOT_VERSION }}-${{ env.KERNEL_NAME }}-${{ env.builddate }}.zip"
          fail_on_unmatched_files: true
          preserve_order: true
